var template='<label><input type="text"></label><style>label::before {\n        content: "";\n        position: absolute;\n        left: 10px;\n        top: 10px;\n        background-image: var(--icon-svg);\n        width: calc(1em + 22px);\n        height: calc(1em + 22px);\n        background-repeat: no-repeat;\n        background-size: 1em;\n        background-position-y: 50%;\n        background-position-x: 5px;\n    }\n    input {\n        display: block;\n        width: calc(100% - 20px);\n        font-size: inherit;\n        font-size: var(--moko-input-font-size);\n        color: inherit;\n        padding: 10px 5px 10px 1.5em;\n        margin: 10px;\n        box-sizing: border-box;\n        border-radius: 5px;\n        border: 0px;\n        outline: none;\n        background:#fefefe;\n        background: var(--moko-input-background-color);\n        background-color: var(--moko-input-background-color);\n    }</style>',searchIconSvg='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>';const $template=document.createElement("template");$template.innerHTML=template;class TextInput extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).appendChild($template.content.cloneNode(!0))}connectedCallback(){const e=this.getAttribute("icon")||"";if(e&&"search"==e){const e=getComputedStyle(this).color;this.shadowRoot.querySelector("label").style.setProperty("--icon-svg",`url("data:image/svg+xml,${encodeURI(searchIconSvg.replace("currentColor",e))}`)}}get value(){return this.shadowRoot.querySelector("input").value}}customElements.define("moko-text-input",TextInput);export default TextInput;
